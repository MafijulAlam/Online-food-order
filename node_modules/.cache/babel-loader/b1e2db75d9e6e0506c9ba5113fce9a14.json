{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MAHFUZ\\\\Desktop\\\\udemy\\\\04-food order\\\\src\\\\store\\\\CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from 'react';\nimport CartContext from './cort-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === 'ADD') {\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id);\n    const exintingCartItem = state.items[existingCartItemIndex];\n    let updatedItems;\n\n    if (exintingCartItem) {\n      const updatedItem = { ...exintingCartItem,\n        amount: exintingCartItem.amount + action.item.amount\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    } else {\n      updatedItems = state.items.concat(action.item);\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: 'ADD',\n      item: item\n    });\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: 'REMOVE',\n      id: id\n    });\n  };\n\n  const cartContex = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContex,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["C:/Users/MAHFUZ/Desktop/udemy/04-food order/src/store/CartProvider.js"],"names":["React","useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedTotalAmount","item","price","amount","existingCartItemIndex","findIndex","id","exintingCartItem","updatedItems","updatedItem","concat","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","cartContex","addItem","removeItem","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,gBAAxB;;AAEA,MAAMC,gBAAgB,GAAG;AACrBC,EAAAA,KAAK,EAAE,EADc;AAErBC,EAAAA,WAAW,EAAC;AAFS,CAAzB;;AAKA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnC,MAAGA,MAAM,CAACC,IAAP,KAAc,KAAjB,EAAuB;AAEnB,UAAMC,kBAAkB,GAAGH,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACG,IAAP,CAAYC,KAAZ,GAAkBJ,MAAM,CAACG,IAAP,CAAYE,MAA7E;AAEA,UAAMC,qBAAqB,GAAGP,KAAK,CAACH,KAAN,CAAYW,SAAZ,CAAuBJ,IAAD,IAAUA,IAAI,CAACK,EAAL,KAAYR,MAAM,CAACG,IAAP,CAAYK,EAAxD,CAA9B;AAEA,UAAMC,gBAAgB,GAAGV,KAAK,CAACH,KAAN,CAAYU,qBAAZ,CAAzB;AAEA,QAAII,YAAJ;;AAEA,QAAGD,gBAAH,EAAoB;AAChB,YAAME,WAAW,GAAE,EACf,GAAGF,gBADY;AAEfJ,QAAAA,MAAM,EAACI,gBAAgB,CAACJ,MAAjB,GAA0BL,MAAM,CAACG,IAAP,CAAYE;AAF9B,OAAnB;AAIAK,MAAAA,YAAY,GAAG,CAAC,GAAGX,KAAK,CAACH,KAAV,CAAf;AACAc,MAAAA,YAAY,CAACJ,qBAAD,CAAZ,GAAsCK,WAAtC;AACH,KAPD,MAQI;AAEAD,MAAAA,YAAY,GAAEX,KAAK,CAACH,KAAN,CAAYgB,MAAZ,CAAmBZ,MAAM,CAACG,IAA1B,CAAd;AACH;;AAID,WAAM;AACFP,MAAAA,KAAK,EAACc,YADJ;AAEFb,MAAAA,WAAW,EAAEK;AAFX,KAAN;AAIH;;AACD,SAAOP,gBAAP;AACH,CAhCD;;AAmCA,MAAMkB,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAE5B,QAAM,CAACC,SAAD,EAAYC,kBAAZ,IAAkCvB,UAAU,CAACK,WAAD,EAAcH,gBAAd,CAAlD;;AAEA,QAAMsB,oBAAoB,GAAId,IAAD,IAAU;AACnCa,IAAAA,kBAAkB,CAAC;AAACf,MAAAA,IAAI,EAAE,KAAP;AAAcE,MAAAA,IAAI,EAACA;AAAnB,KAAD,CAAlB;AACH,GAFD;;AAIA,QAAMe,yBAAyB,GAAIV,EAAD,IAAQ;AACtCQ,IAAAA,kBAAkB,CAAC;AAACf,MAAAA,IAAI,EAAE,QAAP;AAAiBO,MAAAA,EAAE,EAAEA;AAArB,KAAD,CAAlB;AACH,GAFD;;AAIA,QAAMW,UAAU,GAAE;AACdvB,IAAAA,KAAK,EAAEmB,SAAS,CAACnB,KADH;AAEdC,IAAAA,WAAW,EAACkB,SAAS,CAAClB,WAFR;AAGduB,IAAAA,OAAO,EAAEH,oBAHK;AAIdI,IAAAA,UAAU,EAAEH;AAJE,GAAlB;AAOA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEC,UAA7B;AAAA,cACKL,KAAK,CAACQ;AADX;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAxBD;;GAAMT,Y;;KAAAA,Y;AA0BN,eAAeA,YAAf","sourcesContent":["import React, {useReducer} from 'react'\r\nimport CartContext from './cort-context'\r\n\r\nconst defaultCartState = {\r\n    items: [],\r\n    totalAmount:0\r\n}\r\n\r\nconst cartReducer = (state, action) => {\r\n    if(action.type==='ADD'){\r\n        \r\n        const updatedTotalAmount = state.totalAmount + action.item.price*action.item.amount\r\n\r\n        const existingCartItemIndex = state.items.findIndex((item) => item.id === action.item.id)\r\n\r\n        const exintingCartItem = state.items[existingCartItemIndex]\r\n        \r\n        let updatedItems;\r\n\r\n        if(exintingCartItem){\r\n            const updatedItem ={\r\n                ...exintingCartItem,\r\n                amount:exintingCartItem.amount + action.item.amount\r\n            }\r\n            updatedItems = [...state.items]\r\n            updatedItems[existingCartItemIndex] = updatedItem\r\n        }\r\n        else{\r\n            \r\n            updatedItems =state.items.concat(action.item)\r\n        }\r\n\r\n\r\n        \r\n        return{\r\n            items:updatedItems,\r\n            totalAmount: updatedTotalAmount\r\n        }\r\n    }\r\n    return defaultCartState\r\n}\r\n\r\n\r\nconst CartProvider = (props) => {\r\n\r\n    const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState)\r\n\r\n    const addItemToCartHandler = (item) => {\r\n        dispatchCartAction({type: 'ADD', item:item})\r\n    }\r\n\r\n    const removeItemFromCartHandler = (id) => {\r\n        dispatchCartAction({type: 'REMOVE', id: id})\r\n    }\r\n\r\n    const cartContex ={\r\n        items: cartState.items,\r\n        totalAmount:cartState.totalAmount,\r\n        addItem: addItemToCartHandler,\r\n        removeItem: removeItemFromCartHandler\r\n    }\r\n\r\n    return (\r\n        <CartContext.Provider value={cartContex}>\r\n            {props.children}\r\n        </CartContext.Provider>\r\n    )\r\n}\r\n\r\nexport default CartProvider\r\n"]},"metadata":{},"sourceType":"module"}